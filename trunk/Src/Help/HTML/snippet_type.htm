<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2009-2012, Peter Johnson (www.delphidabbler.com).
 *
 * $Rev$
 * $Date$
 *
 * Help topic describing the type definition snippet kind.
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text-html; charset=Windows-1252">
    <title>
      Simple Type Definition Snippets
    </title>
    <link rel="stylesheet" href="../css/codesnip.css" type="text/css">
  </head>
  <body>
    <object
      type="application/x-oleobject"
      classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e"
    >
      <param name="ALink Name" value="SnippetType">
    </object>
    <h1>
      <a name="snippet_type"></a>Simple Type Definition Snippets
    </h1>
    <p>
      A simple type definition snippet, unsurprisingly, defines one or more
      Pascal types. Only simple types are supported. Classes, objects and
      records that contain methods are not: use
      <a href="snippet_class.htm">class &amp; advanced record</a> snippet kinds
      for those. If you're not sure, the only types supported are those that can
      be completely defined in the interface section of a unit.
    </p>
    <p>
      Each type definition snippet must begin with the <strong>type</strong>
      keyword as the first non-space text in the source code. Comments may not
      preceed it. The <strong>type</strong> keyword is followed by at least one
      space or newline and then one or more type definitions.
    </p>
    <p>
      Here's an example of a valid type definition:
    </p>
<pre class="source-code">type
  TMyType = 1..20;
  TMySecondType = array[TMyType] of Integer;</pre>
    <p>
      Simple type definitions may refer to other simple type definitions,
      <a href="snippet_class.htm">class &amp; advanced record</a> type
      definitions or <a href="snippet_constant.htm">constants</a>, providing
      they are defined in Delphi units or elsewhere in the database. The
      snippet's units and dependencies references should indicate where to find
      the other types and constants. Type definitions must not reference
      <a href="snippet_routine.htm">routine</a>,
      <a href="snippet_unit.htm">unit</a> or
      <a href="snippet_freeform.htm">freeform</a> snippets.
    </p>
  </body>
</html>
