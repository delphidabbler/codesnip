<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--
 * $Rev$
 * $Date$
 *
 * ***** BEGIN LICENSE BLOCK *****
 *
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 *
 * The Original Code is snippet_type.htm
 *
 * The Initial Developer of the Original Code is Peter Johnson
 * (http://www.delphidabbler.com/).
 *
 * Portions created by the Initial Developer are Copyright (C) 2009-2011 Peter
 * Johnson. All Rights Reserved.
 *
 * ***** END LICENSE BLOCK *****
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text-html; charset=Windows-1252">
    <title>
      Type Definition Snippets
    </title>
    <link rel="stylesheet" href="../css/codesnip.css" type="text/css">
  </head>
  <body>
    <object
      type="application/x-oleobject"
      classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e"
    >
      <param name="ALink Name" value="SnippetType">
    </object>
    <h1>
      <a name="snippet_type"></a>Type Definition Snippets
    </h1>
    <p>
      A type definition snippet, unsurprisingly, defines one or more Pascal
      types. Only simple types are supported: classes, objects and records that
      contain methods are not. If you're not sure, the only types supported are
      those that can be completely defined in the interface section of a unit.
    </p>
    <p>
      Each type definition snippet must begin with the <strong>type</strong>
      keyword as the first non-space text in the source code. Comments may not
      preceed it. The <strong>type</strong> keyword is followed by at least one
      space or newline and then one or more type definitions.
    </p>
    <p>
      Here's an example of a valid type definition:
    </p>
<pre class="source-code">type
  TMyType = 1..20;
  TMySecondType = array[TMyType] of Integer;</pre>
    <p>
      Type definitions may refer to other type definitions or
      <a href="snippet_constant.htm">constants</a>, providing they are defined
      in Delphi units or elsewhere in the database. The snippet's units and
      dependencies references should indicate where to find the other types and
      constants. Type definitions must not reference
      <a href="snippet_routine.htm">routines</a> or 
      <a href="snippet_freeform.htm">freeform</a> snippets.
    </p>
  </body>
</html>
