/*
 * ExternalObj.idl
 *
 * Source for type library that defines the interface to extensions to the
 * browser control DOM's "external object".
 *
 * $Rev$
 * $Date$
 *
 * ***** BEGIN LICENSE BLOCK *****
 *
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 *
 * The Original Code is ExternalObj.idl
 *
 * The Initial Developer of the Original Code is Peter Johnson
 * (http://www.delphidabbler.com/).
 *
 * Portions created by the Initial Developer are Copyright (C) 2006-2011 Peter
 * Johnson. All Rights Reserved.
 *
 * Contributor(s)
 *   NONE
 *
 * ***** END LICENSE BLOCK *****
 */


[
  uuid(DA95AEFB-3FB5-4A9E-9F9D-A53DD05CA7D4),
  version(7.0),
  helpstring("CodeSnip DOM External Object Extender Type Library"),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1219706147),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 117441012)
]

library ExternalObj
{

  importlib("stdole2.tlb");

  /*
   * V7 interface of extension to browser DOM's "external" object.
   */
  [
    uuid(316B5427-61DE-482A-8D71-10AFBACCB909),
    version(7.0),
    helpstring("DOM external object extender"),
    dual,
    oleautomation
  ]
  interface IWBExternal7: IDispatch
  {
    /*
     * Update database from internet.
     */
    [
    id(0x00000065)
    ]
    HRESULT _stdcall UpdateDbase( void );

    /*
     * Display named snippet.
     *    @param SnippetName [in] Name of snippet to display.
     *    @param UserDefined [in] Whether snippet is user defined.
     */
    [
    id(0x00000066)
    ]
    HRESULT _stdcall DisplaySnippet([in] BSTR SnippetName,
      [in] VARIANT_BOOL UserDefined );

    /*
     * Compiles current snippet.
     */
    [
    id(0x00000067)
    ]
    HRESULT _stdcall CompileSnippet( void );

    /*
     * Displays a hint.
     *   @param Hint [in] Hint to be displayed.
     */
    [
    id(0x00000069)
    ]
    HRESULT _stdcall ShowHint([in] BSTR Hint );

    /*
     * Displays configure compilers dialog box.
     */
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall ConfigCompilers( void );

    /*
     * Edits the named snippet.
     *    @param SnippetName [in] Name of snippet to edit. Must be user defined.
     */
    [
    id(0x0000006C)
    ]
    HRESULT _stdcall EditSnippet([in] BSTR SnippetName);

    /*
     * Displays Donate dialog box.
     */
    [
    id(0x0000006D)
    ]
    HRESULT _stdcall Donate( void );

    /*
     * Display identified category.
     *    @param CatID [in] ID of category to display.
     */
    [
    id(0x0000006E)
    ]
    HRESULT _stdcall DisplayCategory([in] BSTR CatID);

  };

};

